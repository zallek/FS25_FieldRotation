FR_FieldHistoryEntry = {}
FR_FieldHistoryEntry.FULL_GAMESAVE_PATH = "fields.field(?)" .. FR_FieldHistory.GAMESAVE_PATH .. "(?)"

local fieldHistoryEntryClass = Class(FR_FieldHistoryEntry)

function FR_FieldHistoryEntry.new(o)
    local class = o or fieldHistoryEntryClass
    local instance = setmetatable({}, class)
    return instance
end

function FR_FieldHistoryEntry:init(o)
    self.monotonicDay = o.monotonicDay
    self.dayTime = o.dayTime
    self.fruitTypeIndex = o.fruitTypeIndex
    self.growthState = o.growthState
    self.generated = o.generated
    return self
end

function FR_FieldHistory:registerXmlSchema()
    local xmlSchemaSavegame = FieldManager.xmlSchemaSavegame

    xmlSchemaSavegame:register(XMLValueType.INT, FR_FieldHistoryEntry.FULL_GAMESAVE_PATH .. "#monotonicDay", "Monotonic day", nil, false)
    xmlSchemaSavegame:register(XMLValueType.FLOAT, FR_FieldHistoryEntry.FULL_GAMESAVE_PATH .. "#dayTime", "Day time in minutes", nil, false)
    xmlSchemaSavegame:register(XMLValueType.STRING, FR_FieldHistoryEntry.FULL_GAMESAVE_PATH .. "#fruitType", "Name of the fruit type", nil, false)
    xmlSchemaSavegame:register(XMLValueType.INT, FR_FieldHistoryEntry.FULL_GAMESAVE_PATH .. "#growthState", "Growthstate of the fruit type", nil, false)
    xmlSchemaSavegame:register(XMLValueType.BOOL, FR_FieldHistoryEntry.FULL_GAMESAVE_PATH .. "#generated", "Entry was generated by the mod")
end

function FR_FieldHistoryEntry:loadFromXMLFile(xmlFile, key)
    local monotonicDay = xmlFile:getValue(key .. "#monotonicDay")
    local dayTime = xmlFile:getValue(key .. "#dayTime") * 60000
    local fruitTypeName = xmlFile:getValue(key .. "#fruitType")
    local growthState = xmlFile:getValue(key .. "#growthState")
    local generated = xmlFile:getValue(key .. "#generated")
    local fruitType = g_fruitTypeManager:getFruitTypeByName(fruitTypeName)
    local fruitTypeIndex = fruitType and fruitType.index or 0

    self.monotonicDay = monotonicDay
    self.dayTime = dayTime
    self.fruitTypeIndex = fruitTypeIndex
    self.growthState = growthState
    self.generated = generated or false
end

function FR_FieldHistoryEntry:saveToXMLFile(xmlFile, key)
    xmlFile:setValue(key .. "#monotonicDay", self.monotonicDay)
    xmlFile:setValue(key .. "#dayTime", self.dayTime / 60000)
    xmlFile:setValue(key .. "#fruitType", self:getFruitTypeName() or "UNKNOWN")
    xmlFile:setValue(key .. "#growthState", self.growthState)
    if self.generated then
        xmlFile:setValue(key .. "#generated", self.generated)
    end
end

function FR_FieldHistoryEntry:getFruitType()
    return g_fruitTypeManager:getFruitTypeByIndex(self.fruitTypeIndex)
end

function FR_FieldHistoryEntry:getFruitTypeName()
    return g_fruitTypeManager:getFruitTypeNameByIndex(self.fruitTypeIndex)
end

function FR_FieldHistoryEntry:isHaversted()
    local fruitType = self:getFruitType()
    if fruitType == nil then
        return false
    end
    return fruitType.cutStates[self.growthState] == true
end

function FR_FieldHistoryEntry:getDaysAgo()
    return g_currentMission.environment.currentMonotonicDay - self.monotonicDay
end

function FR_FieldHistoryEntry:getYearsOld()
    return math.floor(self:getDaysAgo() / 12)
end

function FR_FieldHistoryEntry:getYearsOldFactor()
    return 2 ^ self:getYearsOld()
end

function FR_FieldHistoryEntry:getRotationMultiplier(currentFruitTypeIndex)
    -- Return multipler between -1 and 1
    local rotationMultiplier = FieldRotation.fieldRotationSystem:getRotationMultiplier(currentFruitTypeIndex, self.fruitTypeIndex)
    return rotationMultiplier / self:getYearsOldFactor()
end
